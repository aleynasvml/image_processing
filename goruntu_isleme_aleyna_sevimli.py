# -*- coding: utf-8 -*-
"""goruntu_isleme_aleyna_sevimli.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oznsUlcSlM3shXn0263qi_dbv04-6i_f
"""

pip install mediapipe

import cv2
import mediapipe as mp

MARGIN = 10  # metnin üst köşesinden elin sınırına olan mesafe
FONT_SIZE = 3  # yazı tipi boyutu
FONT_THICKNESS = 2  # yazı kalınlığı
HANDEDNESS_TEXT_COLOR = (255, 0, 0)  # kırmızı renk

def draw_landmarks_on_image(rgb_image, detection_result):
    hand_landmarks_list = detection_result.multi_hand_landmarks
    handedness_list = detection_result.multi_handedness
    annotated_image = rgb_image.copy()

    if hand_landmarks_list is not None:
        for idx, hand_landmarks in enumerate(hand_landmarks_list):
            handedness = handedness_list[idx].classification[0].label

            mp.solutions.drawing_utils.draw_landmarks(
                annotated_image,
                hand_landmarks,
                mp.solutions.hands.HAND_CONNECTIONS,
                mp.solutions.drawing_styles.get_default_hand_landmarks_style(),
                mp.solutions.drawing_styles.get_default_hand_connections_style()
            )

            height, width, _ = annotated_image.shape
            x_coordinates = [landmark.x for landmark in hand_landmarks.landmark]
            y_coordinates = [landmark.y for landmark in hand_landmarks.landmark]
            text_x = int(min(x_coordinates) * width)
            text_y = int(min(y_coordinates) * height) - MARGIN

            cv2.putText(
                annotated_image,
                f"{handedness}",
                (text_x, text_y),
                cv2.FONT_HERSHEY_DUPLEX,
                FONT_SIZE,
                HANDEDNESS_TEXT_COLOR,
                FONT_THICKNESS,
                cv2.LINE_AA
            )

    return annotated_image


if __name__ == '__main__':
    image = cv2.imread("/content/data/el_tespiti_1.jpg")

    # Resmi RGB formatına çevirme
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    # Resmi yeniden boyutlandırma
    image_resized = cv2.resize(image_rgb, (640, 960))

    # Resme blur efekti ekleme
    image_blurred = cv2.blur(image_resized, (10, 10))

    # Resmi RGB'den BGR'ye dönüştürme
    image_bgr = cv2.cvtColor(image_blurred, cv2.COLOR_RGB2BGR)

    # Düzenlenen resmi kaydetme
    cv2.imwrite("/content/data/el_tespiti_1_ciktisi.jpg", image_bgr)

    # Kaydedilen fotoğrafı okuma
    image_with_landmarks = cv2.imread("/content/data/el_tespiti_1_ciktisi.jpg")

    with mp.solutions.hands.Hands() as hands:
        # Resmin el tespiti yapılmış vektörize halini oluşturun
        results = hands.process(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))

        # El tespiti sonuçlarını resim üzerine çizdirin
        image_with_landmarks = draw_landmarks_on_image(image, results)

        ### resimin el tespiti yapılmış görsel halini BGR formatına çevirin ###
        image_with_landmarks_bgr = cv2.cvtColor(image_with_landmarks, cv2.COLOR_RGB2BGR)

        # Resmi data klasörü içerisine "el_tespit_odev.jpg" olarak kaydedin
        cv2.imwrite("/content/data/el_tespiti_1_ciktisi.jpg", image_with_landmarks_bgr)

        image_with_landmarks_rgb = cv2.cvtColor(image_with_landmarks, cv2.COLOR_BGR2RGB)
        cv2.imwrite("/content/data/RGBel_tespiti_1_ciktisi.jpg", image_with_landmarks_rgb)